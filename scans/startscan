#!/bin/bash

# Start scan is a script which will setup your first steps of the pen test
# It will create a directory with the given name 
# It will execute nmap and gobuster and store the output in the init file in their directories

# Author: Menno Fesevur, 2020
# TryHackMe Name: zeMenno

ip_address=''
target=''
directory_name=''
force=false
wordlist='/usr/share/wordlists/dirbuster/directory-list-2.3-small.txt'
nmap_flags=''
recursive=false
response_codes='200,301,307,401,403'
levels=1
threads=10

print_usage(){
	# The help info
	echo 'usage: startscan [FLAGS] [OPTIONS]'
	echo ''
	echo 'FLAGS:'
	echo ' -i 	The Ip Address of the target machine'
	echo ' -d 	The directory where all the output will be'
	echo ' -w 	Add a custom wordlist for GoBuster'
	echo ' -l 	Amount of levels deep GoBuster will scan'
	echo '    	(The higher this number, the longer the scan will take) dont use -R if you want fast results'
	echo ' -t 	Amount of threads that GoBuster will use'
	echo " -r 	All the response codes for GoBuster (',' seperated)"
	echo ''
	echo 'OPTIONS:'
	echo ' -A 	Will execute an aggressive scan'
	echo ' -R 	Recursively execute GoBuster (may take a while)'
	echo ' -F 	Force the scans even when the host can not be pinged'
}

exec_code(){
	#  Start of the actual execution of code
	echo "[StartScan] Making directories/files"

	# Setting up directories and files
	mkdir $directory_name
	mkdir $directory_name/nmap
	touch $directory_name/nmap/init
	mkdir $directory_name/gobuster
	touch $directory_name/gobuster/init
	touch $directory_name/README.md
	echo '```export IP='$ip_address'```' > $directory_name/README.md
	echo "[StartScan] Created a README.md in the directory: $directory_name"	

	# Start of nmap (aggressive or not)
	echo '[StartScan] Running NMAP'
	sudo nmap $nmap_flags $ip_address -oN $directory_name/nmap/init
	
	# Start of Gobuster
	if [[ $recursive ]]; then
		# If recursive start rec_gobuster
		echo -e "\e[1;34m[StartScan] Starting the recursive GoBuster scan (this may take a while)\e[0m"

		# Check website with curl
		status=$(curl -k -o /dev/null --silent --head --write-out '%{http_code}\n' "$target")

		# Check for the status code if the website is available 
		if [ "$status" -ge "100" -a "$status" -lt "500" ]; then
			# Found a target execute rec_gobuster 
			rec_gobuster $target 0 | tee $directory_name/gobuster/init
		else
			# No website found
			echo -e "\e[1;33mThe target doesn't seem to have a website\e[0m"
		fi
	else
		# Running GoBuster not recursive
		echo '[StartScan] Running GoBuster'
		echo '[StartScan] GoBuster will take a while, start by looking at the nmap output'
		sudo gobuster dir -u http://$ip_address -w $wordlist > $directory_name/gobuster/init
	fi
}

rec_gobuster(){
	# Local variables for this function 
	local target=$1
	local level=$2
	local next_level=$((level+1))

	echo -e "\e[1;32m[+] Found: $target\e[0m"
	# User feedback for what url we are busting
	echo -e "\e[1;33m[+] Busting $target on level $level\e[0m"

	# If we are still on a user selected level 
	if [[ "${level}" -lt "${levels}" ]]; 
	then
		# Executing gobuster and perform all kinds of checks on it so we can read the right data
		gobuster -q -k -r -t $threads dir -f -e -w $wordlist -s $response_codes -u $target | grep 'http.*Status: [234]' | sed 's/ (Status.*//' | while read hit; do
			# We have hit another Url execute rec_gobuster again with this url

			rec_gobuster ${hit} ${next_level} 
		done
	fi
}

# Get all flags and set all variables
while getopts 'hi:d:Fw:ARr:l:t:' flag; do
	case "${flag}" in
		h) print_usage
		   exit 1 ;;
		i) ip_address="${OPTARG}" 
		   target="${OPTARG}" ;;
		d) directory_name="${OPTARG}" ;;
		w) wordlist="${OPTARG}" ;;
		r) response_codes="${OPTARG}" ;;
		l) levels="${OPTARG}" ;;
		t) threads="${OPTARG}" ;;

		A) nmap_flags='-sS -sV -T4 -A' ;; 
		F) force=true ;;
		R) recursive=true ;;
	esac
done

# If we have no IP address or directory name we can not go on
if [[ $ip_address == '' || $directory_name == '' ]]; 
then
	echo -e "\e[1;31mERROR: Not all parameters are filled\e[0m"
	echo 'Try: "startscan -h" for more info'
	exit
fi

# Lets see if levels is an integer
if [[ $levels ]]; then
	if [[ ! $levels =~ ^[0-9]+$ ]]; then
		echo -e "\e[1;31mERROR: levels (-l) is not an integer\e[0m"
		exit
	fi
fi

# Lets see if threads is an integer
if [[ $threads ]]; then
	if [[ ! $threads =~ ^[0-9]+$ ]]; then
		echo -e "\e[1;31mERROR: threads (-t) is not an integer\e[0m"
		exit
	fi
fi

# If the user want to force the scan even though we can't ping the system 
if [[ $force ]]; 
then
	# Forcing the scan
	exec_code
else
	echo "[StartScan] Checking if host is up"
	# Ping the target to see if its up
	if ping -c 1 $ip_address &> /dev/null 
	then
		if [ ! -e $wordlist ]; then
			echo -e "\e[1;31mERROR: Wordlist does not exist\e[0m"
			exit
		fi
		exec_code
	else
		# Host is not up
		echo -e "\e[1;31mERROR: Host is not up, do you have the right ip address?\e[0m"
	fi 
fi